---
import NavigationBar from "../components/NavigationBar.astro";
import Footer from "../components/Footer.astro";
import "../styles/global.css";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    {/* Add a new meta description tag */}
    <meta name="description" content="Frau Katarina's website" />
    {/* Title is hardcoded as Astro, for now. */}
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap"
      rel="stylesheet"
    />
    <title>{title}</title>
  </head>
  <body>
    <main>
      <NavigationBar />
      <slot />
      {/* We want the content of each page to go here */}
      <Footer />
    </main>
  </body>
</html>

<!-- Weâ€™ve added global styles via the is:global template directive. But  -->

<!-- <style is:global></style> -->

<!-- <script> -->
<!--   console.log("Hello world!"); -->
<!-- </script> -->

<script is:inline>
/** Represent the toggle theme class with a variable */
const DARK_THEME_CLASS = "dark";
/** Represent the local storage key by a variable */
const COLOUR_MODE = "COLOUR_MODE";
/** Represent the local storage values by variables */
const LIGHT_THEME = "LIGHT";
const DARK_THEME = "DARK";
/** Grab the toggle */

// const toggle = document.querySelector("button");
const toggle = document.querySelector("[data-theme-toggle]");
/** Grab the document root element. In this case <html>  */
const rootEl = document.documentElement;

const getInitialColourMode = () => {
  /** Get colour mode from local storage **/
  const previouslySavedColourMode = window.localStorage.getItem(COLOUR_MODE);
  if (previouslySavedColourMode) {
    return previouslySavedColourMode;
  }
  /** Does the user prefer dark mode, e.g., through an operating system or user agent setting? */
  if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
    return DARK_THEME;
  }
  /** Default to the light theme */
  return LIGHT_THEME;
};

/**Get initial colour mode */
const initialColourMode = getInitialColourMode();
const setInitialColourMode = (mode) => {
  if (mode === LIGHT_THEME) {
    rootEl.classList.remove(DARK_THEME_CLASS);
  } else {
    rootEl.classList.add(DARK_THEME_CLASS);
  }
};
/** Set the initial colour mode as soon as the script is executed */
setInitialColourMode(initialColourMode);

if (toggle) {
  toggle.addEventListener("click", () => {
    /** toggle the "dark" class on the root element */
    rootEl.classList.toggle(DARK_THEME_CLASS);
    /**Get the current theme mode, i.e., light or dark */
    const colourMode = rootEl.classList.contains(DARK_THEME_CLASS)
      ? DARK_THEME
      : LIGHT_THEME;

    /** Save the current theme to local storage   */
    window.localStorage.setItem(COLOUR_MODE, colourMode);
  });
}
</script>
